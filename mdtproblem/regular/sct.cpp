#include <limits>
#include <string>
#include <math.h>

using namespace std;

#define N 1952
const int best[N] = {0,0,0,0,
1,1,1,1,3,2,4,3,2,3,5,3,5,4,6,7,7,5,7,8,8,9,8,10,11,10,9,11,12,11,13,12,7,12,14,13,15,16,15,16,16,17,16,18,17,18,
17,19,18,20,18,20,21,21,19,21,22,22,23,24,23,25,24,25,25,26,25,27,26,27,27,28,27,29,30,29,30,30,31,30,32,31,32,
31,33,32,33,34,34,35,35,33,35,36,36,37,38,37,37,38,39,39,40,39,41,40,41,40,42,43,42,44,43,44,44,45,44,46,45,46,
45,47,46,47,46,48,47,49,47,49,50,50,51,50,51,51,52,53,53,54,53,54,54,55,54,56,55,56,58,57,58,58,59,58,59,59,60,
59,61,60,61,60,62,61,63,63,63,64,64,65,64,65,65,66,67,66,68,67,68,68,69,68,70,71,70,71,71,72,71,73,72,73,73,74,
73,75,74,75,74,76,75,76,77,77,78,78,79,78,79,79,80,79,80,80,81,82,82,83,82,83,83,84,85,85,86,85,87,86,87,87,88,
87,88,88,89,88,90,89,90,89,91,92,92,93,92,93,93,94,93,94,94,95,96,96,97,96,97,97,98,99,99,100,99,100,100,101,100,
102,101,102,102,103,102,104,103,104,103,105,106,105,106,106,107,106,108,107,108,109,109,110,110,108,110,111,111,
112,113,112,112,113,114,114,115,114,116,115,116,116,117,116,118,117,118,119,119,120,119,120,120,121,120,122,121,
122,123,123,122,124,123,124,125,125,126,125,126,126,127,128,128,129,128,129,129,130,130,131,130,131,131,132,131,
133,134,133,134,134,135,134,136,135,136,135,137,136,138,138,138,139,139,139,139,140,140,141,142,141,141,142,143,
143,144,143,145,144,145,145,146,147,147,148,147,148,148,149,148,150,149,150,149,151,150,152,152,152,151,153,153,
153,154,154,155,154,155,155,156,157,157,158,157,158,158,159,159,160,159,160,162,161,162,162,163,162,164,163,164,
163,165,164,165,164,166,165,167,167,167,168,168,169,168,169,169,170,171,171,172,171,172,172,173,172,174,175,174,
175,175,176,176,177,176,177,177,178,177,179,178,179,178,180,179,181,181,181,182,182,183,182,183,183,184,185,185,
184,185,186,186,187,186,187,187,188,189,189,190,189,191,190,191,191,192,191,193,192,193,192,194,193,194,195,195,
196,196,197,196,197,197,198,197,199,198,199,200,200,201,200,201,201,202,203,203,204,203,204,204,205,205,206,205,
206,206,207,206,208,207,208,207,209,210,210,211,210,211,211,212,211,212,212,213,214,214,213,214,215,215,216,217,
216,216,217,218,218,219,218,220,219,220,220,221,220,222,221,222,223,223,224,224,225,224,225,225,226,225,226,226,
227,226,228,227,228,229,229,230,229,230,230,231,232,232,233,232,233,233,234,234,235,234,235,235,236,235,237,238,
237,239,238,239,238,240,239,240,239,241,240,242,242,242,243,243,244,243,244,244,245,246,245,247,246,247,247,248,
247,249,248,249,249,250,251,251,252,251,252,252,253,252,254,253,254,253,255,254,256,256,256,255,257,258,257,258,
258,259,258,259,259,260,261,261,262,261,263,262,263,263,264,265,264,266,265,266,266,267,266,268,267,268,267,269,
268,270,268,270,269,271,272,271,272,272,273,272,273,273,274,275,275,276,275,276,276,277,278,278,279,278,280,279,
280,280,281,280,281,281,282,281,283,282,283,282,284,283,285,285,285,286,286,287,286,287,287,288,289,289,288,289,
290,290,291,291,292,291,292,292,293,294,293,295,294,295,295,296,295,297,296,297,296,298,297,299,299,299,300,300,
301,300,301,301,302,301,303,302,303,304,304,305,304,305,305,306,307,307,308,307,309,308,309,309,310,309,310,310,
311,310,312,311,312,311,313,314,314,315,314,315,315,316,315,317,316,317,318,318,319,318,319,319,320,321,321,320,
321,322,322,323,322,324,323,324,324,325,324,326,327,326,327,327,328,328,329,328,329,329,330,329,331,330,331,330,
332,331,332,333,333,334,333,334,334,335,336,336,337,336,338,337,338,338,339,338,339,339,340,341,341,342,341,343,
342,343,343,344,343,345,344,345,344,346,345,346,347,347,348,347,348,348,349,350,350,351,350,351,351,352,351,353,
352,353,353,354,355,355,356,355,357,356,357,357,358,357,358,358,359,358,360,359,360,359,361,362,361,362,362,363,
364,364,363,364,365,365,366,365,367,366,367,367,368,369,369,370,369,370,370,371,370,372,371,372,371,373,372,374,
374,374,373,375,376,375,376,376,377,376,378,377,378,379,379,380,379,380,380,381,381,382,383,382,384,383,384,384,
385,384,386,385,386,385,387,386,387,386,388,387,389,390,389,390,390,391,390,391,391,392,393,393,392,393,394,394,
395,395,396,395,396,396,397,398,398,399,398,399,399,400,399,401,400,401,400,402,401,403,404,403,404,404,405,404,
405,405,406,405,407,406,407,408,408,409,410,409,409,410,410,411,412,411,413,412,413,413,414,413,415,414,415,414,
416,415,416,418,417,418,418,419,418,419,419,420,419,421,420,421,422,422,423,423,423,423,424,424,425,426,425,425,
426,427,427,428,427,428,428,429,428,430,431,430,432,431,432,432,433,432,433,433,434,433,435,434,435,434,436,435,
436,437,437,438,439,438,438,439,440,440,441,440,442,441,442,442,443,442,444,443,444,445,445,446,446,447,446,447,
447,448,447,449,448,449,448,450,449,450,451,451,452,451,452,452,453,454,454,455,454,455,455,456,456,457,456,457,
459,458,459,459,460,459,461,460,461,461,462,461,463,462,463,462,464,463,464,465,465,466,465,466,466,467,468,468,
467,468,469,469,470,470,471,470,471,471,472,473,473,474,473,474,474,475,475,476,475,476,476,477,476,478,477,478,
477,479,480,479,480,480,481,480,482,481,482,483,483,484,484,484,484,485,485,486,487,486,488,487,488,488,489,488,
490,489,490,490,491,490,492,491,492,491,493,494,493,494,494,495,494,496,495,496,497,497,498,497,498,498,499,499,
500,499,500,500,501,502,502,503,502,503,503,504,503,505,504,505,504,506,507,507,508,507,508,508,509,508,510,509,
510,509,511,510,511,512,512,513,513,514,513,514,514,515,516,515,517,516,517,517,518,517,519,518,519,518,520,519,
521,522,521,522,522,523,522,524,523,524,523,525,524,525,526,526,527,527,527,527,528,528,529,530,529,529,530,531,
531,532,531,532,532,533,532,534,535,534,536,535,536,536,537,536,537,537,538,537,539,538,539,538,540,539,541,541,
541,542,542,543,542,543,543,544,545,544,546,545,546,546,547,546,548,547,548,549,549,550,550,551,550,551,551,552,
551,553,552,553,552,554,553,555,555,555,556,556,557,556,557,557,558,559,558,558,559,560,560,561,560,561,563,562,
563,563,564,563,565,564,565,565,566,565,567,566,567,566,568,567,568,569,569,570,569,570,570,571,572,572,571,572,
573,573,574,574,575,574,575,575,576,577,577,578,577,578,578,579,579,580,579,580,580,581,580,582,581,582,583,583,
584,583,584,584,585,584,586,585,586,587,587,588,588,589,588,589,589,590,591,590,592,591,592,592,593,592,594,593,
594,594,595,594,596,595,596,595,597,598,597,598,598,599,598,600,599,600,601,601,602,602,602,602,603,603,604,605,
604,604,605,606,606,607,606,608,607,608,608,609,608,609,609,610,611,611,612,611,612,612,613,612,614,613,614,613,
615,614,616,616,616,617,617,618,617,618,618,619,620,620,621,620,621,621,622,621,623,622,623,623,624,623,625,626,
625,626,626,627,626,628,627,628,627,629,628,630,630,630,631,631,631,631,632,632,633,634,633,633,634,635,635,636,
635,637,636,637,636,638,639,638,640,639,640,640,641,640,642,641,642,641,643,642,643,644,644,643,645,645,645,646,
646,647,646,647,647,648,649,649,650,649,650,650,651,650,652,653,652,654,653,654,654,655,654,655,655,656,655,657,
656,657,656,658,657,659,659,659,660,660,661,660,661,661,662,663,663,664,663,664,664,665,664,666,667,666,667,667,
668,667,669,668,669,669,670,669,671,670,671,670,672,671,672,673,673,674,674,675,674,675,675,676,677,676,676,677,
678,678,679,678,679,679,680,681,681,682,681,683,682,683,683,684,683,685,684,685,684,686,685,686,687,687,688,688,
689,688,689,689,690,689,690,690,691,692,692,693,692,693,693,694,695,695,696,695,696,696,697,697,698,697,698,698,
699,698,700,699,700,699,701,702,701,703,702,703,702,704,703,704,705,705,706,706,706,706,707,707,708,709,708,708,
709,710,710,711,710,712,711,712,712,713,712,714,715,714,715,715,716,715,717,716,717,716,718,717,718,719,719,718,
720,719,720,721,721,722,721,722,722,723,724,724,725,724,725,725,726,726,727,726,727,727,728,729,729,730,729,730,
730};

const double max_value = numeric_limits<double>::infinity();
double w[N][N], d[N][N];

int main(int argc, char* argv[])
{
	int n, a, b, c, i, j, k;
	double pn, dil, d1, e[N];

	if (argc < 2)
	{
		printf("An integer parameter between 4 and 2527 is needed");
		exit(1);
	}
	try
	{
		n = stoi(argv[1]);
		if (n < 4 || n > 2527)
		{
		    printf("Parameter must be integer between 4 and 2527");
			exit(1);
		}
	}
	catch(...)
	{
		printf("Parameter must be integer between 4 and 2527");
		exit(1);
	}
	
	a = best[n];
	b = n / 2;
	c = n - a;
		
	pn = 3.14159265358979323846 / n;
			
	for (i = 1; i <= b; i++)
	{
		e[i] = sin(i * pn);
		e[n - i] = e[i];
	}

	for (i = 0; i < n; i++)
	{
		w[i][i] = 0;
		for (j = i + 2; j < n; j++)
		{
			w[i][j] = max_value;
			w[j][i] = max_value;
		}
	}
	
	for (i = 0; i < n; i++){
		j = (i + 1) % n;
		w[i][j] = e[1];
		w[j][i] = e[1];
	}
	for (i = 2; i <= a; i++){
		w[0][i] = e[i];
		w[i][0] = e[i];		
	}
	for (i = c; i < n - 1; i++){
		w[0][i] = e[n - i];
		w[i][0] = e[n - i];		
	}
	for (i = a + 2; i <= b; i++){
		w[a][i] = e[i - a];
		w[i][a] = e[i - a];		
	}
	for (i = c - 2; i >= b; i--){
		w[c][i] = e[c - i];
		w[i][c] = e[c - i];		
	}
		
	w[a][c] = e[c - a];
	w[c][a] = e[c - a];
	
	for (i = 0; i < n; i++ )
	{
		for (j = 0; j < n; j++ )
		{
			d[i][j] = w[i][j];
		}
	}		
	
	for (k = 0; k < n; k++){
		for (i = 0; i < n; i++){
			for (j = 0; j < n; j++){
				if (d[i][k] + d[k][j] < d[i][j])
				{
					d[i][j] = d[i][k] + d[k][j];
				}
			}
		}
	}
	
	dil = 0;
	for (i = 0; i < n; i++){
		for (j = i + 2; j < n; j++){
			d1 = d[i][j]/e[j - i];
			if (d1 > dil)
			{
				dil = d1;
			}
		}
	}

	printf("dilation(SCT(%d, %d) = %.10lf\n", n, a, dil);

	return 0;
}